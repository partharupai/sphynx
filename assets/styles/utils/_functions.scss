///
/// @section Mixins
///
/// Mixins allow you to embed all the properties of a class into another class
/// by simply including the class name as one of its properties. Itâ€™s just like
/// variables, but for whole classes. Mixins can also behave like functions,
/// and take arguments.
///
/// @package     WordPress
/// @subpackage  TrendPress
/// @author      Trendwerk
/// @license     GPL v2
///

/// @section     Mixins
/// @subsection  Full width

@mixin full-width {
  clear: both;
  float: left;
  width: 100%;
}

/// @section     Mixins
/// @subsection  Remove list style

@mixin remove-list-styles {
  list-style: none;
  margin: 0;
  padding: 0;
}

/// @section     Mixins
/// @subsection  Block

@mixin block {
  background-color: $light-background;
  border-radius: 3px;
  box-sizing: border-box;
  margin-bottom: $line-height;
  padding: 20px;

  @include respond-to('medium') {
    padding: 30px;
  }
}

/// @section     Mixins
/// @subsection  Hover

@mixin hover($background, $foreground) {
  &:active,
  &:focus,
  &:hover {
    background-color: $background;
    color: $foreground;
    outline: none;
    text-decoration: none;
  }
}

/// @section     Mixins
/// @subsection  Animate

@mixin border-radius {
  border-radius: 3px;
}

/// @section     Mixins
/// @subsection  Button

@mixin button($type: main) {
  @include border-radius;
  @include hover(shade($primary-color, 15%), $white);
  background-color: $primary-color;
  border: 0;
  color: $white;
  display: inline-block;
  font-weight: bold;
  height: 50px;
  line-height: 50px;
  margin: 0 10px 10px 0;
  outline: 0;
  padding: 0 35px;
  position: relative;
  text-decoration: none;
  text-transform: uppercase;
  $white-space: nowrap;

  @if $type == secondary {
    @include hover(shade($secondary-color, 15%), $white);
    background-color: $secondary-color;

  } @else if $type == tag {
    @include hover($heading-color, $white);
    background-color: $light-background;
    color: $text-color;
    font-weight: normal;
    height: 25px;
    line-height: 25px;
    margin: 0 0 5px 5px;
    padding: 0 10px;
    text-transform: lowercase;

  } @else if $type == pager {
    background-color: $light-background;
    color: $text-color;
    height: 40px;
    line-height: 40px;
    margin: 0 5px 10px;
    padding: 0 20px;
    text-transform: none;

    &.current,
    &.dots {
      background-color: tint($light-background, 75%);

      &:hover {
        color: inherit;
      }
    }
  }
}

/// @section     Mixins
/// @subsection  Meta

@mixin meta() {
  color: $text-light;
  font-size: 13px;
  margin: 0 0 ($line-height / 2);

  a {
    color: $text-color;

    &:hover {
      color: $link-color;
    }
  }
}

/// @section     Mixins
/// @subsection  Animate

@mixin animate-this($what: all, $time: 0.5s, $ease: ease-in-out) {
  -webkit-transition: $what $time $ease;
  transition: $what $time $ease;
}

/// @section     Mixins
/// @subsection  Collumns

@mixin columns($number, $gap) {
  -moz-column-count: $number;
  -webkit-column-count: $number;
  column-count: $number;
  -moz-column-gap: $gap;
  -webkit-column-gap: $gap;
  column-gap: $gap;
}

/// @section    Mixins
/// @subsection Gradient

@mixin gradient($direction, $start-color, $end-color) {
  background-color: $start-color;

  @if $direction == horizontal {
    background-image: linear-gradient(to right, $start-color, $end-color);
  } @else if $direction == vertical {
    background-image: linear-gradient(top, $start-color, $end-color);
  }
}

/// @section     Mixins
/// @subsection  Placeholder

@mixin placeholder($out, $on) {
  &::placeholder {
    color: $out;
  }

  &:focus::placeholder {
    color: $on;
  }
}

/// @section     Mixins
/// @subsection  Respond to
/// @param       {String} $breakpoint - Breakpoint

@mixin respond-to($breakpoint) {
  $raw-query: map-get($breakpoints, $breakpoint);

  @if $raw-query {
    $query: if(type-of($raw-query) == 'string', unquote($raw-query), inspect($raw-query));

    @media (min-width: #{$query}) {
      @content;
    }

  } @else {
    @error 'No value found for `#{$breakpoint}`. ' + 'Please make sure it is defined in the `$breakpoints` map.';
  }
}

/// @section     Mixins
/// @subsection  Shade

@function shade($color, $percentage) {
  @return mix($black, $color, $percentage);
}

/// @section     Mixins
/// @subsection  Sprites

@mixin sprite($top, $left) {
  background-image: url('../../../assets/images/sprite-x1.png');
  background-position: $top $left;
  background-repeat: no-repeat;

  @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
    background-image: url('../../../assets/images/sprite-x2.png');
    background-position: $top x 2 $left x 2;
    background-size: 500px 500px;
  }
}

/// @section     Mixins
/// @subsection  Tint

@function tint($color, $percentage) {
  @return mix($white, $color, $percentage);
}

/// @section     Mixins
/// @subsection  Transform

@mixin transform($transform) {
  transform: $transform;
}

/// @section     Mixins
/// @subsection  Transition

@mixin transition($transition) {
  transition: $transition;
}
